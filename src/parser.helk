# Formal grammar declaration for the HULK programming language
# Use "at sign" after every statement (yes, that includes comments).
# 
# Besides that, the syntax is like yacc's exept that we use
# the "dollar" symbol to separate the productions and the code.
#
# A few pointers:
# 
# - The code executes after the production is completely parsed
# - Each non-terminal returns a (ASTNode*) value called "node";
#    it defaults to NULL and you replace it with your own nodes.
# - There is a variable for each production
#    (named _{Production}; for example, if you have a non-terminal called
#    Expr, there will be a variable called _Expr in scope) already declared for you.
#    This variable contains the node (if it's a terminal) or the Token (it is not).
#    Use them to create complex structures
# - Don't forget to append "dollar" to the list of productions before writing code
# - Don't forget to write "at sign" after each statement

@

Program: StmtBlock $

    node = _StmtBlock;
    fprintf(stderr, "INFO - Created program block\n");

@

StmtBlock: Stmt SEMICOLON StmtBlockTail $

    // Collect all statements into a block
    if (_StmtBlockTail == NULL) {
        ASTNode** block = malloc(sizeof(ASTNode*) * 1);
        block[0] = _Stmt;
        node = create_ast_block(block, 1);
    }
    else {
        int count = _StmtBlockTail->block.stmt_count + 1;
        ASTNode** block = malloc(sizeof(ASTNode*) * count);
        block[0] = _Stmt;
        for (unsigned int i = 0; i < _StmtBlockTail->block.stmt_count; i++) {
            block[i+1] = _StmtBlockTail->block.statements[i];
        }
        node = create_ast_block(block, count);
        free(_StmtBlockTail->block.statements);
        free(_StmtBlockTail);
    }

@

StmtBlockTail: Stmt SEMICOLON StmtBlockTail $

    // Build linked list of statements
    if (_StmtBlockTail == NULL) {
        ASTNode** block = malloc(sizeof(ASTNode*) * 1);
        block[0] = _Stmt;
        node = create_ast_block(block, 1);
    }
    else {
        int count = _StmtBlockTail->block.stmt_count + 1;
        ASTNode** block = realloc(_StmtBlockTail->block.statements, sizeof(ASTNode*) * count);
        // Shift existing elements
        for (unsigned int i = count-1; i > 0; i--) {
            block[i] = block[i-1];
        }
        block[0] = _Stmt;
        node = create_ast_block(block, count);
    }

    | epsilon
@

Stmt: FunctionDef $
    node = _FunctionDef;

    | VariableDef $
    node = _VariableDef;

    | TypeDef $
    node = _TypeDef;

    | Expr $
    node = _Expr;
@

TypeDef: TYPE IDENTIFIER InheritsOpt LBRACE TypeMemberList RBRACE $

    char* parent = NULL;

    if (_InheritsOpt != NULL) {
        parent = _InheritsOpt->variable.name;
    }

    if (_TypeMemberList == NULL) {
        node = create_ast_type_def(_IDENTIFIER.value, parent, NULL, 0);
    }
    else {
        node = create_ast_type_def(_IDENTIFIER.value, parent, _TypeMemberList->block.statements, _TypeMemberList->block.stmt_count);
    }
    fprintf(stderr, "INFO - Created type: %s\n", _IDENTIFIER.value);
@

InheritsOpt: INHERITS IDENTIFIER $
    node = create_ast_variable(_IDENTIFIER.value);

    | epsilon
@

TypeMemberList: IDENTIFIER TypeMember SEMICOLON TypeMemberListTail $
    // Build member list in order
    int count = _TypeMemberListTail->block.stmt_count + 1;
    ASTNode** members = malloc(sizeof(ASTNode*) * count);
    members[0] = _TypeMember;
    if (_TypeMember->type == AST_FIELD_DEF) {
        _TypeMember->field_def.name = _IDENTIFIER.value;
    }
    else {
        _TypeMember->function_def.name = _IDENTIFIER.value;
        _TypeMember->type = AST_METHOD_DEF;
    }
    for (unsigned int i = 0; i < _TypeMemberListTail->block.stmt_count; i++) {
        members[i+1] = _TypeMemberListTail->block.statements[i];
    }
    node = create_ast_block(members, count);

    | epsilon
@

TypeMemberListTail: IDENTIFIER TypeMember SEMICOLON TypeMemberListTail $
    int count = _TypeMemberListTail->block.stmt_count + 1;
    ASTNode** members = malloc(sizeof(ASTNode*) * count);
    members[0] = _TypeMember;
    if (_TypeMember->type == AST_FIELD_DEF) {
        _TypeMember->field_def.name = _IDENTIFIER.value;
    }
    else {
        _TypeMember->function_def.name = _IDENTIFIER.value;
        _TypeMember->type = AST_METHOD_DEF;
    }
    for (unsigned int i = 0; i < _TypeMemberListTail->block.stmt_count; i++) {
        members[i+1] = _TypeMemberListTail->block.statements[i];
    }
    node = create_ast_block(members, count);

    | epsilon $
        node = create_ast_block(NULL, 0);
@

TypeMember: FieldDef $
    node = _FieldDef;

    | MethodDef $
    node = _MethodDef;
@

FieldDef: EQUALS Expr $
    node = create_ast_field_def("", _Expr);
@

MethodDef: LPAREN ParamList RPAREN ARROW Expr $
    // Prepend "self" to parameter list
    char** params = malloc(sizeof(char*) * (_ParamList->param_list.count + 1));
    params[0] = strdup("self");
    for (unsigned int i = 0; i < _ParamList->param_list.count; i++) {
        params[i+1] = _ParamList->param_list.params[i];
    }
    node = create_ast_function_def("", _Expr, params, _ParamList->param_list.count + 1);
@

FunctionDef: FUNCTION IDENTIFIER LPAREN ParamList RPAREN FunctionBody $

    node = create_ast_function_def(
        _IDENTIFIER.value,
        _FunctionBody,
        _ParamList->param_list.params,
        _ParamList->param_list.count
    );
    fprintf(stderr, "INFO - Created function: %s\n", _IDENTIFIER.value);

@

FunctionBody: ARROW Expr $
        node = _Expr;
    | LBRACE StmtBlock RBRACE $
        node = _StmtBlock;
@

ParamList: epsilon $
    node = create_ast_param_list(NULL, 0);

    | IDENTIFIER ParamListTail $

    fprintf(stderr, "%p\n", _ParamListTail);
    char** params = malloc(sizeof(char*) * (_ParamListTail->param_list.count + 1));
    params[0] = _IDENTIFIER.value;
    for (unsigned int i = 0; i < _ParamListTail->param_list.count; i++) {
        params[i+1] = _ParamListTail->param_list.params[i];
    }
    node = create_ast_param_list(params, _ParamListTail->param_list.count + 1);
@

ParamListTail: COMMA IDENTIFIER ParamListTail $
    
    char** params = malloc(sizeof(char*) * (_ParamListTail->param_list.count + 1));
    params[0] = _IDENTIFIER.value;
    for (unsigned int i = 0; i < _ParamListTail->param_list.count; i++) {
        params[i+1] = _ParamListTail->param_list.params[i];
    }
    node = create_ast_param_list(params, _ParamListTail->param_list.count + 1);

    | epsilon $
        // this kode doesn't appear
        node = create_ast_param_list(NULL, 0);
@

VariableDef: LET VariableDefList InOpt $
    if (_InOpt == NULL) {
        // Multiple variable definitions without body
        if (_VariableDefList->variable_list.count > 1) {
            fprintf(
                stderr,
                "ERROR - Syntax error: defining multple variables without a body is not allowed!\n"
            );
            exit(1);
        }
        node = create_ast_variable_def(_VariableDefList->variable_list.names[0], _VariableDefList->variable_list.values[0]);
        fprintf(stderr, "INFO - Defined %d variables\n", _VariableDefList->variable_list.count);
    }
    else {
        // Let-in expression
        node = create_ast_let_in(
            _VariableDefList->variable_list.names,
            _VariableDefList->variable_list.values,
            _VariableDefList->variable_list.count,
            _InOpt
        );
        fprintf(stderr, "INFO - Created let-in with %d variables\n", _VariableDefList->variable_list.count);
    }
@

InOpt: IN Stmt $
    node = _Stmt;

    | epsilon
@


VariableDefList: SingleVariableDef VariableDefListTail $
    // Build arrays for names and values
    // check NULL
    int count = _VariableDefListTail->variable_list.count + 1;
    char** names = malloc(sizeof(char*) * count);
    ASTNode** values = malloc(sizeof(ASTNode*) * count);
    
    names[0] = _SingleVariableDef->variable_def.name;
    values[0] = _SingleVariableDef->variable_def.body;
    
    for (unsigned int i = 0; i < _VariableDefListTail->variable_list.count; i++) {
        names[i+1] = _VariableDefListTail->variable_list.names[i];
        values[i+1] = _VariableDefListTail->variable_list.values[i];
    }
    
    node = create_ast_variable_list(names, values, count);
@

VariableDefListTail: COMMA SingleVariableDef VariableDefListTail $
    int count = _VariableDefListTail->variable_list.count + 1;
    char** names = malloc(sizeof(char*) * count);
    ASTNode** values = malloc(sizeof(ASTNode*) * count);
    
    names[0] = _SingleVariableDef->variable_def.name;
    values[0] = _SingleVariableDef->variable_def.body;
    
    for (unsigned int i = 0; i < _VariableDefListTail->variable_list.count; i++) {
        names[i+1] = _VariableDefListTail->variable_list.names[i];
        values[i+1] = _VariableDefListTail->variable_list.values[i];
    }
    
    node = create_ast_variable_list(names, values, count);

    | epsilon $
        node = create_ast_variable_list(NULL, NULL, 0);
@

SingleVariableDef: IDENTIFIER EQUALS Expr $
    node = create_ast_variable_def(_IDENTIFIER.value, _Expr);
@

Expr: Term ExprTail $

    if (_ExprTail == NULL) {
        node = _Term;
    }
    else {
        fprintf(stderr, "INFO - Completing Expr with type=%d\n", _Term->type);
        _ExprTail->binary_op.left = _Term;
        node = _ExprTail;
    }
@

ExprTail: PLUS Term ExprTail $
    if (_ExprTail == NULL) {
        node = create_ast_binary_op(
            NULL,
            _Term,
            OP_ADD
        );
    }
    else {
        _ExprTail->binary_op.left = _Term;
        node = create_ast_binary_op(
            NULL,
            _ExprTail,
            OP_ADD
        );
    }

    | MINUS Term ExprTail $
    if (_ExprTail == NULL) {
        node = create_ast_binary_op(NULL, _Term, OP_SUB);
    }
    else {
        _ExprTail->binary_op.left = _Term;
        node = create_ast_binary_op(
            NULL,
            _ExprTail,
            OP_SUB
        );
    }
    
    | epsilon
@

Term: Factor TermTail $
    if (_TermTail == NULL) {
        node = _Factor;
    }
    else {
        _TermTail->binary_op.left = _Factor;
        node = _TermTail;
    }
@

TermTail: MULTIPLY Factor TermTail $
    if (_TermTail == NULL) {
        node = create_ast_binary_op(NULL, _Factor, OP_MUL);
    }
    else {
        _TermTail->binary_op.left = _Factor;
        node = create_ast_binary_op(
            NULL,
            _TermTail,
            OP_MUL
        );
    }
    
    | DIVIDE Factor TermTail $
    if (_TermTail == NULL) {
        node = create_ast_binary_op(NULL, _Factor, OP_DIV);
    }
    else {
        _TermTail->binary_op.left = _Factor;
        node = create_ast_binary_op(
            NULL,
            _TermTail,
            OP_DIV
        );
    }

    | MOD Factor TermTail $
    if (_TermTail == NULL) {
        node = create_ast_binary_op(NULL, _Factor, OP_MOD);
    }
    else {
        _TermTail->binary_op.left = _Factor;
        node = create_ast_binary_op(
            NULL,
            _TermTail,
            OP_MOD
        );
    }

    | EXP Factor TermTail $

    if (_TermTail == NULL) {
        node = create_ast_binary_op(
            NULL,
            _Factor,
            OP_EXP
        );
    }
    else {
        _TermTail->binary_op.left = _Factor;
        node = create_ast_binary_op(
            NULL,
            _TermTail,
            OP_EXP
        );
    }
    
    | epsilon
@

Factor: NUMBER FactorTail $
    if (_FactorTail == NULL) {
        node = create_ast_number(atoi(_NUMBER.value));
    }
    else {
        _FactorTail->binary_op.left = create_ast_number(atoi(_NUMBER.value));
        node = _FactorTail;
    }

    | IDENTIFIER FactorTail $

    if (_FactorTail == NULL) {
        node = create_ast_variable(_IDENTIFIER.value);
    }
    else {
        node = _FactorTail;
        if (node->type == AST_FUNCTION_CALL) {
            _FactorTail->function_call.name = _IDENTIFIER.value;
        }
        else if (node->type == AST_FIELD_ACCESS) {
            _FactorTail->field_access.cls = _IDENTIFIER.value;
            fprintf(stderr, "INFO - Accessed field: %s.%s\n", _FactorTail->field_access.cls, _FactorTail->field_access.field);
        }
        else if (node->type == AST_METHOD_CALL) {
            _FactorTail->method_call.cls->variable.name = _IDENTIFIER.value;
            fprintf(stderr, "INFO - Called method: %s.%s\n", _FactorTail->method_call.cls->variable.name, _FactorTail->method_call.method);
        }
        else if (node->type == AST_FIELD_REASSIGN) {
            _FactorTail->field_reassign.field_access->field_access.cls = _IDENTIFIER.value;
        }
        else {
            _FactorTail->variable.name = _IDENTIFIER.value;  // Set identifier name
        }
    }

    | STRING_LITERAL $
    char* str = _STRING_LITERAL.value;
    size_t len = strlen(str);
    char* result = (char*) malloc(len - 1); // Total bytes: (len - 2) + 1
    memcpy(result, str + 1, len - 2); // Copy from index 1 to len-2
    result[len - 2] = '\0';

    node = create_ast_string(result);

    | NEW IDENTIFIER LPAREN ArgList RPAREN $
    node = create_ast_constructor(_IDENTIFIER.value, _ArgList->block.statements, _ArgList->block.stmt_count);
    fprintf(stderr, "INFO - Created instance of: %s\n", _IDENTIFIER.value);

    | IF LPAREN Expr RPAREN LBRACE StmtBlock RBRACE ELSE LBRACE StmtBlock RBRACE $

    node = create_ast_conditional(_Expr, _StmtBlock, __StmtBlock);

    | WHILE LPAREN Expr RPAREN LBRACE StmtBlock RBRACE $

    node = create_ast_while_loop(_Expr, _StmtBlock);

    | LPAREN Expr RPAREN $
    node = _Expr;
@

FactorTail: LPAREN ArgList RPAREN $
    node = create_ast_function_call("", _ArgList->block.statements, _ArgList->block.stmt_count);
    // Identifier will be set in parent Factor

    | DOT IDENTIFIER ClassStuff $
    node = _ClassStuff;
    if (node->type == AST_FIELD_ACCESS) {
        _ClassStuff->field_access.field = _IDENTIFIER.value;
    }
    else if (node->type == AST_METHOD_CALL) {
        _ClassStuff->method_call.method = _IDENTIFIER.value;
    }
    else if (node->type == AST_FIELD_REASSIGN) {
        _ClassStuff->field_reassign.field_access->field_access.field = _IDENTIFIER.value;
    }

    | epsilon
@

ClassStuff: LPAREN ArgList RPAREN $
    // Method call with implicit self
    size_t new_count = _ArgList->block.stmt_count + 1;
    ASTNode** new_args = malloc(new_count * sizeof(ASTNode*));
    new_args[0] = create_ast_variable("");  // Add self as first arg
    for (size_t i = 0; i < _ArgList->block.stmt_count; i++) {
        new_args[i+1] = _ArgList->block.statements[i];
    }
    node = create_ast_method_call(
        new_args[0],
        "",
        new_args,
        new_count
    );
    | REASSIGN IDENTIFIER $
        node = create_ast_field_reassign(
            create_ast_field_access("", ""),
            _IDENTIFIER.value
        );

    |  epsilon $
    // Field access
    node = create_ast_field_access("", "");
@

ArgList: epsilon $
    node = create_ast_block(NULL, 0);

    | Expr ArgListTail $
    if (_ArgListTail == NULL) {
        ASTNode** args = malloc(sizeof(ASTNode*) * (1));
        args[0] = _Expr;
        node = create_ast_block(args, 1);
    }
    else {
        ASTNode** args = malloc(sizeof(ASTNode*) * (_ArgListTail->block.stmt_count + 1));
        args[0] = _Expr;
        for (unsigned int i = 0; i < _ArgListTail->block.stmt_count; i++) {
            args[i+1] = _ArgListTail->block.statements[i];
        }
        node = create_ast_block(args, _ArgListTail->block.stmt_count + 1);
    }
@

ArgListTail: COMMA Expr ArgListTail $
    ASTNode** args = malloc(sizeof(ASTNode*) * (_ArgListTail->block.stmt_count + 1));
    args[0] = _Expr;
    for (unsigned int i = 0; i < _ArgListTail->block.stmt_count; i++) {
        args[i+1] = _ArgListTail->block.statements[i];
    }
    node = create_ast_block(args, _ArgListTail->block.stmt_count + 1);

    | epsilon $
        node = create_ast_block(NULL, 0);
@
